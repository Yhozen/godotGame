services:
  - docker
env:
  # Use GAME_NAME to set your game's name. It is being used
  # throughout this file for naming exported artifacts.
  # This will, for example, create an "Awesome Game.exe"
  # Also set the Godot version you want to use here. Supported Godot versions can be
  # found here: https://cloud.docker.com/u/gamedrivendesign/repository/docker/gamedrivendesign/godot-export/tags
  # If your version is not available, please open an issue here: https://github.com/GameDrivenDesign/docker-godot-export
  - GAME_NAME="ThatVeryFarMountain" GODOT_VERSION="3.2"
    # Each of the following lines exports the game for a given platform.
    # You can specify the platform in the EXPORT_NAME variable
    # The exported game will be written to the folder specified after the second "-v" flag
    # "-v $(pwd)/output/html5:/build/output" writes the exported game to  the "output/html5" folder.
    #
    # Make sure that you have created an `export_presets.cfg` file with all necessary export
    # templates (HTML5, Linux/X11, Windows Desktop, Max OSX) as described in the Godot documentation:
    # https://docs.godotengine.org/en/3.1/getting_started/workflow/export/exporting_projects.html
# Now comes deployment related code.
# To make this work, you need to set a GITHUB_TOKEN environment variable through
# the TravisCI web ui. For more information take a look at the TravisCI docs:
# https://docs.travis-ci.com/user/deployment/pages/#Setting-the-GitHub-token
# This creates zip files from the exported game builds for the
# three desktop platforms

deploy:
  # The following block is responsible to upload the zip files
  - provider: releases
    skip-cleanup: true
    api_key: $GITHUB_TOKEN
    before_install:
      - openssl aes-256-cbc -K $encrypted_20574dde555e_key -iv $encrypted_20574dde555e_iv -in debug.keystore.enc -out debug.keystore -d
    install:
      - docker build . -t godot-html-builder
    script:
      - docker run -e EXPORT_NAME="Linux/X11"       -e OUTPUT_FILENAME="${GAME_NAME}"         -v $(pwd):/build/src -v $(pwd)/output/linux:/build/output   "godot-html-builder:latest"
      - docker run -e EXPORT_NAME="Windows Desktop" -e OUTPUT_FILENAME="${GAME_NAME}.exe"     -v $(pwd):/build/src -v $(pwd)/output/windows:/build/output "godot-html-builder:latest"
      - docker run -e EXPORT_NAME="Mac OSX"         -e OUTPUT_FILENAME="${GAME_NAME}-mac.zip" -v $(pwd):/build/src -v $(pwd)/output/mac:/build/output     "godot-html-builder:latest"
      - docker run -e EXPORT_NAME="Android"         -e OUTPUT_FILENAME="${GAME_NAME}.apk" -v $(pwd):/build/src -v $(pwd)/output/android:/build/output     "godot-html-builder:latest"
    before_deploy:
      - zip -j "${GAME_NAME}-linux.zip"   output/linux/*
      - zip -j "${GAME_NAME}-windows.zip" output/windows/*
      - cp -R output/mac/* .
      - cp -R output/android/* .
    file:
      - "${GAME_NAME}-linux.zip"
      - "${GAME_NAME}-windows.zip"
      - "${GAME_NAME}-mac.zip"
      - "${GAME_NAME}.apk"
    on:
      # Create GitHub Releases for new git tags
      # regardless of the branch.
      all_branches: true
      tags: true

  # created above to GitHub Releases whenever a new git tag
  # is created.
  # The following block is responsible for pushing the HTML5 version of the game
  # to GitHub Pages. To do so, Travis will commit the contents specified in "local-dir"
  # to a "gh-pages" branch in your repository. It will then be accessible at:
  # username.github.io/reponame if your repo is at github.com/username/reponame.
  - provider: pages
    skip-cleanup: true
    github-token: $GITHUB_TOKEN
    install:
      - docker build . -t godot-html-builder
    script:
      - docker run -e EXPORT_NAME="HTML5"           -e OUTPUT_FILENAME="index.html"           -v $(pwd):/build/src -v $(pwd)/output/html5:/build/output   "godot-html-builder:latest"
    local-dir: output/html5
    on:
      # This will only update the game with new commits from the master branch
      # You can optionally only update the game on new git tags.
      branch: master
      # tags: true
